import Expect
import Json/Decode.{Error(..)}
import Json/Encode
import Test

let identity = fn x {
  x
}

pub let decode_tests = Test.describe("Json/Decode", [
  Test.describe("of", [
    Test.test("always succeeds", fn {
      let decoder = Json/Decode.of(42);
      Json/Encode.null
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Ok(42))
    }),
  ]),
  Test.describe("fail", [
    Test.test("always fails", fn {
      let decoder = Json/Decode.fail("failure reason");
      Json/Encode.null
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Err(Failure("failure reason")))
    }),
  ]),
  Test.describe("string", [
    Test.test("succeed to decode strings", fn {
      let decoder = Json/Decode.string;
      Json/Encode.string("example_string")
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Ok("example_string"))
    }),
    Test.test("fail to decode values different than strings", fn {
      let decoder = Json/Decode.string;
      Json/Encode.null
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Err(Failure("a string")))
    }),
  ]),
  Test.describe("float", [
    Test.test("succeed to decode a float", fn {
      let decoder = Json/Decode.float;
      Json/Encode.float(42.2)
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Ok(42.2))
    }),
  ]),
  Test.describe("map", [
    Test.test("succeed to decode values that succeed", fn {
      let decoder = {
        Json/Decode.of(42)
        |> Json/Decode.map(fn x {
          x + 1
        })
      };
      Json/Encode.null
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Ok(43))
    }),
  ]),
  Test.describe("field", [
    Test.test("fails to decode an object when json is not an object", fn {
      let decoder = Json/Decode.field("some-field", Json/Decode.string);
      Json/Encode.null
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Err(Failure("an object")))
    }),
    Test.test("fails to decode an object field when field does not exist", fn {
      let decoder = Json/Decode.field("my-field", Json/Decode.string);
      Json/Encode.object([])
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Err(Failure("an object with a 'my-field' field")))
    }),
    Test.test(
      "fails to decode an object field when field has the wrong type",
      fn {
        let decoder = Json/Decode.field("x", Json/Decode.string);
        Json/Encode.object([("x", Json/Encode.null)])
        |> Json/Decode.decode(decoder)
        |> Expect.equal(Err(Field("x", Failure("a string"))))
      },
    ),
    Test.test("succeed to decode an object field", fn {
      let field_name = "my-field";
      let decoder = Json/Decode.field(field_name, Json/Decode.string);
      Json/Encode.object([(field_name, Json/Encode.string("field-value"))])
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Ok("field-value"))
    }),
    Test.test("succeed to decode multiple fields", fn {
      let decoder = {
        let#Json/Decode.and_then x = Json/Decode.field("x", Json/Decode.string);
        let#Json/Decode.and_then Unit = Json/Decode.field("y", Json/Decode.null);
        let#Json/Decode.and_then z = Json/Decode.of(42);
        Json/Decode.of((x, z))
      };
      Json/Encode.object([
        ("x", Json/Encode.string("field-value")),
        ("y", Json/Encode.null),
      ])
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Ok(("field-value", 42)))
    }),
  ]),
  Test.describe("list", [
    Test.test("fails to decode values that are not arrays", fn {
      let decoder = Json/Decode.list(Json/Decode.int);
      Json/Encode.null
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Err(Failure("a list")))
    }),
    Test.test("succeed to decode an empty list", fn {
      let decoder = Json/Decode.list(Json/Decode.int);
      Json/Encode.list(Json/Encode.string, [])
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Ok([]))
    }),
    Test.test("succeed to decode a list of values that succeed to decode", fn {
      let decoder = Json/Decode.list(Json/Decode.int);
      Json/Encode.list(Json/Encode.int, [10, 20, 30])
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Ok([10, 20, 30]))
    }),
    Test.test("succeed to decode a list of Json values", fn {
      let decoder = Json/Decode.list(Json/Decode.int);
      Json/Encode.list(identity, [Json/Encode.int(0), Json/Encode.int(1)])
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Ok([0, 1]))
    }),
    Test.test("fails to decode a list of values that fails to decode", fn {
      let decoder = Json/Decode.list(Json/Decode.int);
      Json/Encode.list(identity, [
        Json/Encode.int(0),
        Json/Encode.string("not an int"),
      ])
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Err(Index(1, Failure("a number"))))
    }),
  ]),
  Test.describe("optional_field", [
    Test.test("succeed to decode valid fields", fn {
      let decoder = Json/Decode.optional_field("x", Json/Decode.int);
      Json/Encode.object([("x", Json/Encode.int(42))])
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Ok(Some(42)))
    }),
    Test.test("succeed absent fields", fn {
      let decoder = Json/Decode.optional_field("x", Json/Decode.int);
      Json/Encode.object([])
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Ok(None))
    }),
    Test.test("fails to decode fields of wrong type", fn {
      let decoder = Json/Decode.optional_field("x", Json/Decode.int);
      Json/Encode.object([("x", Json/Encode.string("not an int"))])
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Err(Field("x", Failure("a number"))))
    }),
  ]),
  Test.describe("parsed json", [
    Test.test("fail to parse a json from string", fn {
      Json/Decode.parse_json("not-a-json")
      |> Expect.equal(
        Err("Unexpected token 'o', \"not-a-json\" is not valid JSON"),
      )
    }),
    Test.test("fail to parse a json from string when decoding", fn {
      Json/Decode.decode_string("not-a-json", Json/Decode.of(Unit))
      |> Expect.equal(
        Err(Failure("Unexpected token 'o', \"not-a-json\" is not valid JSON")),
      )
    }),
    Test.test("succeed to decode a json from string", fn {
      let decoder = Json/Decode.field("x", Json/Decode.int);
      Json/Decode.decode_string("{\"x\": 42 }", decoder)
      |> Expect.equal(Ok(42))
    }),
  ]),
  Test.describe("one_of", [
    Test.test("fails when empty", fn {
      let decoder = Json/Decode.one_of([]);
      Json/Encode.null
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Err(Failure("a non-empty list of decoders")))
    }),
    Test.test("succeeds the first clauses matches", fn {
      let decoder = Json/Decode.one_of([Json/Decode.string]);
      Json/Encode.string("my string")
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Ok("my string"))
    }),
    Test.test("succeeds when at least one clause matches the json", fn {
      let decoder = Json/Decode.one_of([
        Json/Decode.string,
        Json/Decode.null
        |> Json/Decode.map(fn _ {
          "got null"
        }),
      ]);
      Json/Encode.null
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Ok("got null"))
    }),
    Test.test("fails when no clauses match ", fn {
      let decoder = Json/Decode.one_of([
        Json/Decode.int,
        Json/Decode.null
        |> Json/Decode.map(fn _ {
          0
        }),
      ]);
      Json/Encode.object([])
      |> Json/Decode.decode(decoder)
      |> Expect.equal(Err(OneOf([Failure("a number"), Failure("null")])))
    }),
  ]),
])

pub let main = Test.run(decode_tests)
